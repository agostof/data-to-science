services:
  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dev.dockerfile
    command: yarn run dev --host 0.0.0.0 --port 8080
    volumes:
      - ./frontend/:/app
    restart: always
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    command: uvicorn app.main:app --host 0.0.0.0 --port 5000 --reload
    volumes:
      - ./backend:/app
      - user-data:/static
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - backend.env
      - db.env

  db:
    image: postgis/postgis:15-3.3
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=d2s
      - POSTGRES_DB=d2s
    env_file:
      - db.env

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=youremail@example.com
      - PGADMIN_DEFAULT_PASSWORD=password

  redis:
    image: redis:alpine
    restart: always

  celery_worker:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    command: /app/worker-start.sh
    volumes:
      - user-data:/static
    restart: always
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - backend.env
      - db.env

  flower:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    command: /app/flower-start.sh
    volumes:
      - user-data:/user-data
    ports:
      - 5555:5555
    restart: always
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - backend.env
      - db.env

  proxy:
    build:
      context: ./nginx
      dockerfile: nginx.dockerfile
      args:
        DEFAULT_CONF: d2s-proxy.dev.conf
    ports:
      - "0.0.0.0:80:80"
    restart: always
    depends_on:
      - frontend

volumes:
  db-data:
  user-data:
