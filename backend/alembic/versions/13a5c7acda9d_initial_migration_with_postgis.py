"""initial migration with postgis

Revision ID: 13a5c7acda9d
Revises: 
Create Date: 2023-07-17 18:54:40.127370

"""
from alembic import op
import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '13a5c7acda9d'
down_revision: str | None = None
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=128), nullable=False),
    sa.Column('last_name', sa.String(length=128), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=300), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=300), nullable=False),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('harvest_date', sa.Date(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('role', postgresql.ENUM('Standard', 'Manager', name='role_type'), nullable=False),
    sa.Column('member_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('datasets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('category', postgresql.ENUM('Field', 'Ground', 'UAS', name='dataset_type'), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('flights',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('acquisition_date', sa.DateTime(), nullable=False),
    sa.Column('altitude', sa.Float(), nullable=False),
    sa.Column('side_overlap', sa.Float(), nullable=False),
    sa.Column('forward_overlap', sa.Float(), nullable=False),
    sa.Column('sensor', postgresql.ENUM('RGB', 'Multispectral', 'LiDAR', 'Other', name='sensor_type'), nullable=False),
    sa.Column('platform', postgresql.ENUM('Phantom_4', 'M300', 'M350', 'Other', name='platform_type'), nullable=False),
    sa.Column('dataset_id', sa.UUID(), nullable=False),
    sa.Column('pilot_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
    sa.ForeignKeyConstraint(['pilot_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('data_products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_path', sa.String(), nullable=False),
    sa.Column('data_type', postgresql.ENUM('Ortho', 'DSM', 'PointCloud', 'Other', name='data_product_type'), nullable=False),
    sa.Column('flight_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_path', sa.String(), nullable=False),
    sa.Column('flight_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('raw_data')
    op.drop_table('data_products')
    op.drop_table('flights')
    op.drop_table('datasets')
    op.drop_table('team_members')
    op.drop_table('projects')
    op.drop_table('teams')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
