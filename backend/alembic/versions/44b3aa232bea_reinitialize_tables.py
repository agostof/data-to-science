"""reinitialize tables

Revision ID: 44b3aa232bea
Revises: 
Create Date: 2023-09-11 01:53:22.916652

"""
from alembic import op
import sqlalchemy as sa
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '44b3aa232bea'
down_revision: str | None = None
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_geospatial_table('locations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('center_x', sa.Float(), nullable=False),
    sa.Column('center_y', sa.Float(), nullable=False),
    sa.Column('geom', Geometry(geometry_type='POLYGON', spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_index('idx_locations_geom', 'locations', ['geom'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=128), nullable=False),
    sa.Column('last_name', sa.String(length=128), nullable=False),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=300), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=300), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('harvest_date', sa.Date(), nullable=True),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('member_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('member_id', 'team_id', name='unique_to_team')
    )
    op.create_table('flights',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('acquisition_date', sa.Date(), nullable=False),
    sa.Column('altitude', sa.Float(), nullable=False),
    sa.Column('side_overlap', sa.Float(), nullable=False),
    sa.Column('forward_overlap', sa.Float(), nullable=False),
    sa.Column('sensor', postgresql.ENUM('RGB', 'Multispectral', 'LiDAR', 'Other', name='sensor_type'), nullable=False),
    sa.Column('platform', postgresql.ENUM('Phantom_4', 'M300', 'M350', 'Other', name='platform_type'), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('pilot_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['pilot_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('member_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('data_products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_type', postgresql.ENUM('dsm', 'point_cloud', 'ortho', 'other', name='dtype'), nullable=False),
    sa.Column('filepath', sa.String(), nullable=False),
    sa.Column('original_filename', sa.String(), nullable=False),
    sa.Column('flight_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('filepath', sa.String(), nullable=False),
    sa.Column('original_filename', sa.String(), nullable=False),
    sa.Column('flight_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=False),
    sa.Column('state', postgresql.ENUM('PENDING', 'STARTED', 'COMPLETED', name='job_state'), nullable=False),
    sa.Column('status', postgresql.ENUM('WAITING', 'INPROGRESS', 'SUCCESS', 'FAILED', name='job_status'), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('data_product_id', sa.UUID(), nullable=True),
    sa.Column('raw_data_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['data_product_id'], ['data_products.id'], ),
    sa.ForeignKeyConstraint(['raw_data_id'], ['raw_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('jobs')
    op.drop_table('raw_data')
    op.drop_table('data_products')
    op.drop_table('project_members')
    op.drop_table('flights')
    op.drop_table('team_members')
    op.drop_table('projects')
    op.drop_table('teams')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_geospatial_index('idx_locations_geom', table_name='locations', postgresql_using='gist', column_name='geom')
    op.drop_geospatial_table('locations')
    # ### end Alembic commands ###
