services:
  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    restart: always
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    volumes:
      - user-data:/static
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  db:
    image: postgis/postgis:15-3.3
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready --username=${POSTGRES_USER} --dbname=${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: always

  celery_worker:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    command: /app/worker-start.sh
    volumes:
      - user-data:/static
    restart: always
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - .env

  proxy:
    build:
      context: ./nginx
      dockerfile: nginx.dockerfile
      args:
        DEFAULT_CONF: d2s-proxy.prod.conf
    ports:
      - '0.0.0.0:8000:80'
    restart: always
    depends_on:
      - frontend

volumes:
  db-data:
  user-data:
