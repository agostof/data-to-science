services:
  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.prod.dockerfile
      args:
      - VITE_API_V1_STR=/api/v1
      - VITE_BRAND_FULL=Data to Science
      - VITE_BRAND_SHORT=D2S
      - VITE_BRAND_SLOGAN=A Data-driven Open Science Community for Sustained Innovation
    image: d2s-app:latest
    platform: linux/x86_64
    depends_on:
      - backend
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true

  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        NUM_OF_WORKERS: 1
    image: d2s-api:latest
    platform: linux/x86_64
    volumes:
      - log-data:/app/logs
      - user-data:/static
    read_only: true
    tmpfs:
      - /var/tmp
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true
    env_file:
      - backend.env
      - db.env

  db:
    image: postgis/postgis:15-3.3
    platform: linux/x86_64
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    read_only: true
    tmpfs:
      - /var/run/postgresql
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=d2s
      - POSTGRES_DB=d2s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true
    env_file:
      - db.env

  redis:
    image: redis:alpine
    platform: linux/x86_64
    user: redis
    read_only: true
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true

  celery_worker:
    image: d2s-api:latest
    platform: linux/x86_64
    command: /app/worker-start.sh
    volumes:
      - user-data:/static
    read_only: true
    tmpfs:
      - /tmp
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "celery", "-A", "app.worker", "inspect", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true
    env_file:
      - backend.env
      - db.env

  proxy:
    build: 
      context: ./nginx
      dockerfile: nginx.dockerfile
      args:
        DEFAULT_CONF: d2s-proxy.prod.conf
    image: d2s-proxy:latest
    platform: linux/x86_64
    volumes:
      - ./nginx/d2s-proxy.prod.conf:/etc/nginx/conf.d/default.conf
    read_only: true
    tmpfs:
      - /tmp
    ports:
      - "127.0.0.1:8000:80"
    depends_on:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges=true

volumes:
  db-data:
  log-data:
  user-data:
