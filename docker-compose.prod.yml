services:
  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    image: d2s-app:latest
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 1000M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 500M

  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: true
    image: d2s-api:latest
    volumes:
      - user-data:/static
    depends_on:
      db:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 1000M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 500M
    env_file:
      - backend.env
      - db.env

  db:
    image: postgis/postgis:15-3.3
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready", "--username=$$POSTGRES_USER", "--dbname=$$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=d2s
      - POSTGRES_DB=d2s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 250M
    env_file:
      - db.env

  redis:
    image: redis:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 50M
          pids: 10
        reservations:
          cpus: "0.25"
          memory: 20M

  celery_worker:
    image: d2s-api:latest
    command: /app/worker-start.sh
    volumes:
      - user-data:/static
    depends_on:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 1000M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 500M
    env_file:
      - backend.env
      - db.env

  proxy:
    image: nginxinc/nginx-unprivileged:latest
    volumes:
      - ./nginx/d2s-proxy.prod.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "0.0.0.0:8000:80"
    depends_on:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 500M
          # pids: 1
        reservations:
          cpus: "0.25"
          memory: 200M  

volumes:
  db-data:
  user-data:
